// Generated by CoffeeScript 1.4.0
(function() {
  var auth, bcrypt, client, redis, rtg;

  bcrypt = require('bcrypt');

  auth = require('../lib/auth');

  if (process.env.REDISTOGO_URL) {
    rtg = require("url").parse(process.env.REDISTOGO_URL);
    client = require("redis").createClient(rtg.port, rtg.hostname);
    client.auth(rtg.auth.split(":")[1]);
  } else {
    redis = require("redis");
    client = redis.createClient();
  }

  client.on("error", function(err) {
    console.log("Redis Error: " + err);
  });

  exports.login = function(req, res) {
    auth.ssl_required(req, res, true);
    res.render('auth/login', {
      locals: {
        title: 'Login',
        flash: req.flash()
      }
    });
  };

  exports.authenticate = function(req, res) {
    var password, username;
    auth.ssl_required(req, res, true);
    username = req.body.username;
    password = req.body.password;
    client.get(username, function(err, reply) {
      if (err) {
        req.flash("error", "An error occurred.");
        res.redirect('/auth/login');
        return;
      }
      if (!reply) {
        req.flash("error", "Invalid username/password combination.");
        res.redirect('/auth/login');
        return;
      }
      bcrypt.compare(password, reply, function(err, same) {
        if (err) {
          req.flash("error", "An error occurred.");
          res.redirect('/auth/login');
          return;
        }
        if (!same) {
          req.flash("error", "Invalid username/password combination.");
          res.redirect('/auth/login');
          return;
        } else {
          req.flash("error", "Welcome, " + username + ".");
        }
        req.session.auth = true;
        req.session.username = username;
        res.locals.authenticated = true;
        res.locals.username = username;
        res.redirect('/content/menu');
        return;
      });
    });
  };

  exports.logout = function(req, res) {
    req.session.regenerate(function() {
      res.redirect('/auth/login');
    });
  };

}).call(this);
